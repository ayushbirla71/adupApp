<sssp_config>
<app id="0lKtwciFfw.adupApp">
<package_url>https://<my hosted url>/wgt/adupApp.wgt</package_url>
<main>index.html</main>
<auto_start>true</auto_start>
<encryption>false</encryption>
<resolution width="1080" height="1920"/>
<required_version>2.3</required_version>
</app>
</sssp_config>





let currentAbortController = null;

async function playAllContentInLoop(filenames, ads, rcs) {
  // Abort previous execution
  if (currentAbortController) {
    console.log("🛑 Aborting previous playback loop...");
    currentAbortController.abort();
  }

  currentAbortController = new AbortController();
  const signal = currentAbortController.signal;

  const container = document.getElementById("ad_player");
  const fileDir = "downloads/subDir";
  let adLoopTimeouts = [];
  let currentVideo = null;

  if (!container) {
    console.error("❌ 'ad_player' container not found");
    return;
  }

  console.log("🧹 Cleaning previous timeouts and DOM...");
  adLoopTimeouts.forEach(clearTimeout);
  adLoopTimeouts = [];

  if (currentVideo) {
    try {
      currentVideo.pause();
      currentVideo.src = "";
      currentVideo.load();
      currentVideo.onended = null;
      currentVideo.onerror = null;
      currentVideo.remove();
      console.log("🎥 Previous video cleaned up");
    } catch (e) {
      console.warn("⚠️ Error cleaning video:", e.message);
      addErrorLog(Error cleaning video: ${e.message});
    }
    currentVideo = null;
  }

  [...container.querySelectorAll(".media-slide")].forEach((el) => {
    container.removeChild(el);
  });

  const getMediaType = (filename) => {
    const ext = filename.split(".").pop().toLowerCase();
    if (["jpg", "jpeg", "png", "gif"].includes(ext)) return "image";
    if (["mp4", "webm", "mov"].includes(ext)) return "video";
    return null;
  };

  const resolveFile = (fileName) =>
    new Promise((resolve, reject) => {
      tizen.filesystem.resolve(
        ${fileDir}/${fileName},
        (file) => {
          console.log("📁 Resolved file:", fileName);
          addInfoLog(Resolved file with URL: ${fileName} -> ${file.toURI()});
          resolve(file.toURI());
        },
        (err) => {
          console.warn("❌ Failed to resolve file:", fileName);
          addErrorLog(Failed to resolve file: ${fileName} - ${err.message});
          resolve(null); // Skip on fail
        },
        "r"
      );
    });

  const fadeOutAndRemove = (el) => {
    console.log("🌫️ Fading out current media...");
    el.style.opacity = 0;
    const timeout = setTimeout(() => {
      if (el && el.parentNode === container) {
        container.removeChild(el);
        console.log("🗑️ Removed element from DOM");
      }
    }, 1000);
    adLoopTimeouts.push(timeout);
  };

  let index = 0;

  console.log("▶️ Starting ad playback loop...");

  while (!signal.aborted) {
    if (index >= filenames.length) index = 0;
    const currentFile = filenames[index];
    const type = getMediaType(currentFile);

    console.log(
      📦 Processing file [${index}]: ${currentFile} (type: ${type})
    );

    if (!type) {
      console.warn("⛔ Unsupported format, skipping:", currentFile);
      addErrorLog(Unsupported format for file: ${currentFile});
      index++;
      continue;
    }

    const uri = await resolveFile(currentFile);
    if (signal.aborted) break;

    if (!uri) {
      console.warn("🚫 Could not resolve URI, skipping:", currentFile);
      addErrorLog(Could not resolve URI for file: ${currentFile});
      index++;
      continue;
    }

    const wrapper = document.createElement("div");
    wrapper.className = "media-slide";
    wrapper.style.cssText = 
      opacity: 0;
      transition: opacity 1s ease-in-out;
      position: absolute;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      z-index: 1;
    ;

    if (type === "image") {
      const img = new Image();
      img.onload = () => {
        if (signal.aborted) return;
        console.log("🖼️ Image loaded:", currentFile);

        wrapper.appendChild(img);
        container.appendChild(wrapper);
        requestAnimationFrame(() => (wrapper.style.opacity = 1));

        if (filenames.length > 1) {
          const timeout = setTimeout(() => {
            if (!signal.aborted) {
              console.log("⏱️ Image display complete. Moving to next...");
              fadeOutAndRemove(wrapper);
            }
          }, 10000); // 10s per image
          adLoopTimeouts.push(timeout);
        }
      };
      img.onerror = () => {
        console.warn("🧨 Image load error:", currentFile);
      };
      img.className = "ad_image";
      img.src = uri;

      await new Promise((resolve) => setTimeout(resolve, 10000));

      if (filenames.length === 1) {
        console.log("✅ Single image played once. Exiting loop.");
        break;
      }
    } else if (type === "video") {
      console.log("🎥 Preparing video:", currentFile);
      const video = document.createElement("video");
      video.src = uri;
      video.preload = "auto";
      video.load();
      video.autoplay = false;
      video.muted = false;
      video.volume = 1.0;
      video.controls = false;
      video.style.cssText = "width:100vw;height:95vh;object-fit:fill;";
      wrapper.appendChild(video);
      container.appendChild(wrapper);

      currentVideo = video;

      requestAnimationFrame(() => {
        if (signal.aborted) return;
        wrapper.style.opacity = 1;
        setTimeout(() => {
          if (signal.aborted) return;
          video
            .play()
            .then(() => {
              console.log("▶️ Video started:", currentFile);
              addInfoLog(Playing video: ${currentFile});
            })
            .catch((err) => {
              console.warn("⛔ Video play failed:", err.message);
              addErrorLog(Video play failed: ${currentFile} - ${err.message});
              fadeOutAndRemove(wrapper);
            });
        }, 300);
      });

      await new Promise((resolve) => {
        const onDone = () => {
          video.onended = null;
          video.onerror = null;
          if (!signal.aborted) {
            fadeOutAndRemove(wrapper);
            console.log("🏁 Video ended:", currentFile);
          }
          resolve();
        };
        video.onended = onDone;
        video.onerror = () => {
          console.warn("💥 Video error:", currentFile);
          addErrorLog(Video error: ${currentFile});
          onDone();
        };

        if (signal.aborted) {
          console.log("🛑 Playback aborted during video");
          addErrorLog(Playback aborted during video: ${currentFile});
          onDone();
        }
      });
    }

    index++;
  }

  console.log("🛑 Playback loop terminated.");
}